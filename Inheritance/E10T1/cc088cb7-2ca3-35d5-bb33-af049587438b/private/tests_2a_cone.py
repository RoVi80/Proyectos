
from unittest import TestCase
# catch potential exception from import
try:
    from public.cone import Cone
except Exception:
    # Just make sure that all tests are still executed to have a stable number
    # of exercise points. An appropriate warning is generated by the smoke tests.
    pass


class ConeTest(TestCase):
    cone = None
    object_type = "Cone"

    @classmethod
    def setUpClass(cls):
        cls.cone = Cone(4, 10, 10.77, "red", True)

    @classmethod
    def tearDownClass(cls):
        cls.cone = None

    def test_0_get_color(self):
        try:
            actual = self.cone.get_color()
            expected = "red"
            message = f"@@For the {self.object_type} object initiated with {expected} color, expected color return was {expected} but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_1_set_color(self):
        try:
            expected = "blue"
            self.cone.set_color(expected)
            actual = self.cone.get_color()
            message = f"@@For the {self.object_type} object with {expected} color, expected color return was {expected} but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_2_get_radius(self):
        try:
            expected = 4
            actual = self.cone.get_radius()
            message = f"@@For the {self.object_type} object initiated with radius 4, expected radius return was  4 but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_3_get_vertical_height(self):
        try:
            expected = 10
            actual = self.cone.get_vertical_height()
            message = f"@@For the {self.object_type} object initiated with vertical height 10, expected vertical height return was 10 but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_4_get_slant_height(self):
        try:
            expected = 10.77
            actual = self.cone.get_slant_height()
            message = f"@@For the {self.object_type} object initiated with slant height 10.77, expected slant height return was 10.77 but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_5_get_area(self):
        try:
            expected = 185.51
            actual = self.cone.get_area()
            message = f"@@For the {self.object_type} object initiated with Cone(4,10,10.77,red,True) expected area return was {expected} but {actual} is found@@"
            self.assertAlmostEqual(actual, expected, delta=0.01, msg=message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_6_get_volume(self):
        try:
            expected = 167.47
            actual = self.cone.get_volume()
            message = f"@@For the {self.object_type} object initiated with Cone(4,10,10.77,red,True) expected volume return was {expected} but {actual} is found@@"
            self.assertAlmostEqual(actual, expected, delta=0.01, msg=message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_7_get_filled(self):
        try:
            actual = self.cone.get_filled()
            message = f"@@For the {self.object_type} object initiated with True filled, expected filled return was True but {actual} is found@@"
            self.assertTrue(actual, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_8_set_filled(self):
        try:
            self.cone.set_filled(False)
            actual = self.cone.get_filled()
            message = f"@@For the {self.object_type} object with False filled, expected filled return was False but {actual} is found@@"
            self.assertFalse(actual, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)
