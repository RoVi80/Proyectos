#!/usr/bin/env python3

from unittest import TestCase
# catch potential exception from import
try:
    from public.delivery_restaurant import DeliveryRestaurant
except Exception:
    # Just make sure that all tests are still executed to have a stable number
    # of exercise points. An appropriate warning is generated by the smoke tests.
    pass

class DeliveryRestaurantTest(TestCase):

    def test00_is_in_range_false(self):
        try:
            sut = DeliveryRestaurant("r", "a", 20)
            actual = sut.is_in_range(30)
        except:
            m = "@@Unexpected error when checking distance for delivery range.@@"
            self.fail(m)
        m = "@@distances higher than the deliver radius should return false.@@"
        self.assertFalse(actual, m)

    def test01_is_in_range_true(self):
        try:
            sut = DeliveryRestaurant("r", "a", 20)
            actual = sut.is_in_range(20)
        except:
            m = "@@Unexpected error when checking distance for delivery range.@@"
            self.fail(m)
        m = "@@distances smaller or equal than the deliver radius should return true.@@"
        self.assertTrue(actual, m)

    def test02_descr_restaurant_parent(self):
        try:
            name = "rest1"
            cuisine = "allcuisine"
            sut = DeliveryRestaurant(name, cuisine, 10)
            actual = sut.describe_restaurant()
        except:
            m = "@@Unexpected error when describing delivery restaurant.@@"
            self.fail(m)
        m = "@@describe_restaurant() should return a string containing both the name and the cuisine_type of the restaurant.@@"
        contains_name = actual.find(name)
        contains_cuisine = actual.find(cuisine)
        self.assertTrue(contains_name != -1, m)
        self.assertTrue(contains_cuisine != -1, m)

    def test03_is_open(self):
        s = 3
        try:
            name = "rest1"
            cuisine = "allcuisine"
            sut = DeliveryRestaurant(name, cuisine, 10, True)

            sut.add_consumption_unit("ice tea", s)
            sut.sell_unit("ice tea")
            actual = sut.get_sales()
        except:
            m = "@@The is_open param needs to be passed to the parent in the constructor.@@"
            self.fail(m)
        m = f"@@sales should be {s} but was {actual}.@@"
        self.assertEqual(s, actual, m)
