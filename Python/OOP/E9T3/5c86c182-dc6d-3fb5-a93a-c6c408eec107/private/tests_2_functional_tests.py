#!/usr/bin/env python3

from unittest import TestCase

# catch potential exception from import
try:
    from public.script import Restaurant
    from public.item import Item
    from public.order import Order
except Exception:
    # Just make sure that all tests are still executed to have a stable number of points.
    # An appropriate warning is generated by the smoke tests.
    pass


class PrivateFunctionalTestSuite(TestCase):

    def test00_default_init(self):
        try:
            Restaurant("Branch1", [Item("Hamburger", 20)])
        except:
            self.fail(
                "@@Failed to instantiate a Restaurant@@")

    def test_01_get_restaurant_name(self):
        restaurant_name = "Branch_ZurÄ±ch"
        try:
            restaurant = Restaurant(restaurant_name, [Item("Hamburger", 20)])
            actual = restaurant.get_restaurant_name()
        except:
            self.fail("@@Failed to get the branch name.@@")

        message = f"@@For the provided restaurant name {restaurant_name} , expected restaurant name was {restaurant_name} but {actual} is found@@"
        self.assertEqual(actual, restaurant_name, message)

    def test_02_get_menu_list(self):
        restaurant_name = "Zurich_1"
        try:
            menu_list = [Item("Hamburger", 20), Item("Pizza", 30)]
            restaurant = Restaurant(restaurant_name, menu_list)
            actual = restaurant.get_menu_list()
        except:
            self.fail("@@Failed to get the menu list.@@")
        message = f"@@For the provided menu list {menu_list}, expected menu list return was {menu_list} but {actual} is found.@@"
        self.assertEqual(actual, menu_list, message)

    def test_03_get_order_list_no_order(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            menu_list = [hamburger, pizza]
            restaurant = Restaurant(restaurant_name, menu_list)
            actual = restaurant.get_order_list()
        except:
            self.fail("@@Failed to set new order.@@")
        expected = "No order yet"
        message = f"@@For the no orders, expected order list return was {expected} but {actual} is found.@@"
        self.assertEqual(actual, expected, message)

    def test_04_set_and_get_order_list_single_order(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            menu_list = [hamburger, pizza]
            order_list = [pizza]
            restaurant = Restaurant(restaurant_name, menu_list)
            restaurant.set_order(order_list)
            actual = restaurant.get_order_list()
        except:
            self.fail("@@Failed to set new order.@@")
        expected = [Order(order_list)]
        message = f"@@For the provided orders {order_list} and menu {menu_list}, expected order list return was {expected} but {actual} is found@@"
        self.assertListEqual(list(map(vars, expected)),
                             list(map(vars, actual)), message)

    def test_05_set_and_get_order_list_multiple_order(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            menu_list = [hamburger, pizza]
            order_list = [pizza, pizza, hamburger]
            restaurant = Restaurant(restaurant_name, menu_list)
            restaurant.set_order(order_list)
            actual = restaurant.get_order_list()
        except:
            self.fail("@@Failed to set new order.@@")
        expected = [Order(order_list)]
        message = f"@@For the provided orders {order_list} and menu {menu_list}, expected return was {expected} but {actual} is found@@"
        self.assertListEqual(list(map(vars, expected)),
                             list(map(vars, actual)), message)

    def test_06_get_revenue_no_order(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            menu_list = [hamburger, pizza]
            restaurant = Restaurant(restaurant_name, menu_list)
            actual = restaurant.get_revenue()
        except:
            self.fail("@@Failed to get revenue.@@")
        expected = 0
        message = f"@@For the no orders, expected revenue return was {expected} but {actual} is found.@@"
        self.assertEqual(actual, expected, message)

    def test_07_get_revenue_multiple_order(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            menu_list = [hamburger, pizza]
            order_list = [pizza, pizza, hamburger]
            restaurant = Restaurant(restaurant_name, menu_list)
            restaurant.set_order(order_list)
            actual = restaurant.get_revenue()
        except:
            self.fail("@@Failed to set new order.@@")
        expected = 80
        message = f"@@For the provided orders {order_list} and menu {menu_list}, expected revenue return was {expected} but {actual} is found.@@"
        self.assertEqual(actual, expected, message)

    def test_08_get_order_not_in_menu_single(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            fish = Item("Fish", 30)
            menu_list = [hamburger, pizza]
            order_list = [fish]
            restaurant = Restaurant(restaurant_name, menu_list)
            restaurant.set_order(order_list)
            actual = restaurant.get_order_list()
        except:
            self.fail("@@Failed to set new order.@@")
        expected = "No order yet"
        message = f"@@For the provided orders {order_list} and menu {menu_list}, expected order list return was {expected} but {actual} is found.@@"
        self.assertEqual(actual, expected, message)

    def test_09_get_order_not_in_menu_multiple(self):
        try:
            steak = Item("Steak", 25)
            salad = Item("Salad", 10)
            fish = Item("Fish", 30)
            menu_list = [steak]
            order_list = [steak, salad, fish, steak]
            restaurant = Restaurant("Zurich_1", menu_list)
            restaurant.set_order(order_list)
            actual = restaurant.get_order_list()
        except:
            self.fail("@@Failed to get order list.@@")
        expected = [Order([steak, steak])]
        message = f"@@For the provided orders {order_list} and menu {menu_list}, expected order list return was {expected} but {actual} is found@@"
        self.assertListEqual(list(map(vars, expected)),
                             list(map(vars, actual)), message)

    def test_10_get_order_list_empty_order(self):
        restaurant_name = "Zurich_1"
        try:
            hamburger = Item("Hamburger", 20)
            pizza = Item("Pizza", 30)
            menu_list = [hamburger, pizza]
            restaurant = Restaurant(restaurant_name, menu_list)
            order_list = []
            restaurant.set_order(order_list)
            actual = restaurant.get_order_list()
        except:
            self.fail("@@Failed to set new order.@@")
        expected = "No order yet"
        message = f"@@For the provided empty order list [], expected order list return was {expected} but {actual} is found.@@"
        self.assertEqual(actual, expected, message)
