#!/usr/bin/env python3

from unittest import TestCase
import ast
import types

# catch potential exception from import
try:
    from public.script import Restaurant
    from public.item import Item
except Exception:
    # Just make sure that all tests are still executed to have a stable number of points.
    # An appropriate warning is generated by the smoke tests.
    pass


# utility
def get_non_method_members(ts):
    if type(ts) == type:
        ts = [ts]
    class_members = []
    for t in ts:
        for attr_name in dir(t):
            attr = getattr(t, attr_name)
            if isinstance(attr, types.MethodType) or isinstance(attr, types.FunctionType):
                continue
            class_members.append(attr_name)
    return class_members


class InfoHidingTestSuite(TestCase):

    TYPE = Restaurant
    INSTANCE = Restaurant("Branch1", [Item("Hamburger", 20)])

    def test_instance_variables(self):

        static = get_non_method_members(InfoHidingTestSuite.TYPE)

        for attr_name in dir(InfoHidingTestSuite.INSTANCE):
            if attr_name.startswith("_"):
                continue
            attr = getattr(InfoHidingTestSuite.INSTANCE, attr_name)
            if isinstance(attr, types.MethodType) or isinstance(attr, types.FunctionType):
                continue
            if attr_name in static:
                continue
            m = "@@Classes should hide implementation details. The variable '{}' does not need ".format(attr_name) + \
                "to be public.@@"
            self.fail(m)

    def test_global_state(self):

        with open("public/script.py") as f:
            tree = ast.parse(f.read())
            v = SolutionVisitor()
            v.visit(tree)

            m = "@@Class state should be self-contained, yet, at least " +\
                "one variable is defined in the global scope.@@"
            self.assertFalse(v.hasAssignInGlobalScope, m)

    def test_static_variables(self):
        # built-int type + imported type
        predef = get_non_method_members([object, TestCase])
        # attributes of the _class_
        for attr_name in get_non_method_members(InfoHidingTestSuite.TYPE):
            if attr_name in predef:
                continue
            # clean name of private/protected variables
            type_prefix = "_" + InfoHidingTestSuite.TYPE.__name__
            if attr_name.startswith(type_prefix):
                attr_name = attr_name[len(type_prefix):]
            m = "@@Object instances should be independent, yet, the variable " +\
                "'{}' is defined as a shared class variable.@@".format(
                    attr_name)
            self.fail(m)


class SolutionVisitor(ast.NodeVisitor):

    def __init__(self):
        self.hasAssignInGlobalScope = False

    def visit_If(self, node):
        try:
            if node.test.left.id == "__name__":
                return
        except:
            self.generic_visit(node)

    def visit_Assign(self, node):
        self.hasAssignInGlobalScope = True

    def visit_FunctionDef(self, node):
        return

    def visit_ClassDef(self, node):
        return
