
from unittest import TestCase
# catch potential exception from import
try:
    from public.cube import Cube
except Exception:
    # Just make sure that all tests are still executed to have a stable number
    # of exercise points. An appropriate warning is generated by the smoke tests.
    pass


class CubeTest(TestCase):
    cube = None
    object_type = "Cube"

    @classmethod
    def setUpClass(cls):
        cls.cube = Cube(5, "red", True)

    @classmethod
    def tearDownClass(cls):
        cls.cube = None

    def test_0_get_color(self):
        try:
            actual = self.cube.get_color()
            expected = "red"
            message = f"@@For the given {self.object_type} object initiated with {expected} color, expected color return was {expected} but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_1_set_color(self):
        try:
            expected = "blue"
            self.cube.set_color(expected)
            actual = self.cube.get_color()
            message = f"@@For the given {self.object_type} object with {expected} color, expected color return was {expected} but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_2_get_side_length(self):
        try:
            expected = 5
            actual = self.cube.get_side_length()
            message = f"@@For the {self.object_type} object initiated with side length 5, expected side length return was 5 but {actual} is found@@"
            self.assertEqual(actual, expected, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_3_get_area(self):
        try:
            expected = 150
            actual = self.cube.get_area()
            message = f"@@For the {self.object_type} object initiated with cube(5,red,True) expected area return was {expected} but {actual} is found@@"
            self.assertAlmostEqual(actual, expected, delta=0.01, msg=message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_4_get_volume(self):
        try:
            expected = 125
            actual = self.cube.get_volume()
            message = f"@@For the {self.object_type} object initiated with cube(5,red,True) expected volume return was {expected} but {actual} is found@@"
            self.assertAlmostEqual(actual, expected, delta=0.01, msg=message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_5_get_filled(self):
        try:
            actual = self.cube.get_filled()
            message = f"@@For the {self.object_type} object initiated with True filled, expected filled return was True but {actual} is found@@"
            self.assertTrue(actual, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_6_set_filled(self):
        try:
            self.cube.set_filled(False)
            actual = self.cube.get_filled()
            message = f"@@For the {self.object_type} object with False filled, expected filled return was False but {actual} is found@@"
            self.assertFalse(actual, message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_7_get_area_float(self):
        try:
            cube = Cube(6.1, "red", True)
            expected = 223.26
            actual = cube.get_area()
            message = f"@@For the {self.object_type} object initiated with cube(5,red,True) expected area return was {expected} but {actual} is found@@"
            self.assertAlmostEqual(actual, expected, delta=0.01, msg=message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)

    def test_8_get_volume_float(self):
        try:
            cube = Cube(6.1, "red", False)
            expected = 226.98
            actual = cube.get_volume()
            message = f"@@For the {self.object_type} object initiated with cube(5,red,True) expected volume return was {expected} but {actual} is found@@"
            self.assertAlmostEqual(actual, expected, delta=0.01, msg=message)
        except Exception as e:
            message = "@@An {} error is raised. Please see the details : {}@@".format(
                type(e).__name__, ''.join(str(e) for e in e.args))
            self.fail(message)
