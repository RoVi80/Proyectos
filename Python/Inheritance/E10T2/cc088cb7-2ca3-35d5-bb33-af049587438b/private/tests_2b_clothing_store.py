#!/usr/bin/env python3

from unittest import TestCase

# catch potential exception from import
try:
    from public.clothing_store import ClothingStore
except Exception:
    # Just make sure that all tests are still executed to have a stable number
    # of exercise points. An appropriate warning is generated by the smoke tests.
    pass

class TestClothingStore(TestCase):

    def test00_clothing_store_init(self):
        try:
            sut = ClothingStore(2500)
            capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
        except:
            m = "@@Unexpected error when checking the  status of the ClothingStore directly after initialization.@@"
            self.fail(m)
        m = "@@Incorrect result when checking the status of a ClothingStore directly after initialization.@@"
        self.assertEqual(2500, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(0, clothing_pieces, m)

    def test01_clothing_store_procure_with_discount(self):
        try:
            sut = ClothingStore(10000)
            sut.procure(20, 100)
            capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
        except Warning:
            m = "@@Unexpected Warning when checking the status of the ClothingStore after procurement.@@"
            self.fail(m)
        except:
            m = "@@Unexpected error when checking the status of the ClothingStore after procurement.@@"
            self.fail(m)
        m = "@@Incorrect result when checking the status of a ClothingStore after procurment.@@"
        self.assertEqual(8400, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(100, clothing_pieces, m)

    def test02_clothing_store_procure_without_discount(self):
        try:
            sut = ClothingStore(10000)
            sut.procure(20, 10)
            capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
        except Warning:
            m = "@@Unexpected Warning when checking the status of the ClothingStore after procurement.@@"
            self.fail(m)
        except:
            m = "@@Unexpected error when checking the status of the ClothingStore after procurement.@@"
            self.fail(m)
        m = "@@Incorrect result when checking the status of a ClothingStore after procurment.@@"
        self.assertEqual(9800, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(10, clothing_pieces, m)

    def test03_clothing_store_procure_warning(self):
        try:
            sut = ClothingStore(4000)
            sut.procure(10, 4000)
        except Warning:
            capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
            self.assertEqual(0, capital, "@@After trying to procure too many clothing pieces, the capital should be set accordingly (procure as many items as possible).@@")
            self.assertEqual(500, clothing_pieces, "@@After trying to procure too many clothing pieces, the clothing pieces of the ClothingStore should be the amount of clotihing pieces it still could afford.@@")
        except:
            m = "@@Unexpected error when checking the status of the Bakery after procurement.@@"
            self.fail(m)
        else:
            m = "@@After trying to buy too many doughs, a Warning should be thrown.@@"
            self.fail(m)


    def test04_clothing_store_sell(self):
        try:
            sut = ClothingStore(10000)
            sut.procure(20, 100)
            sut.sell(30, 50)
        except Warning:
            m = "@@Unexpected Warning during the selling the pieces of cloth.@@"
            self.fail(m)
        except:
            m = "@@Unexpected error thrown when too many items where sold.@@"
            self.fail(m)
        capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
        m = "@@After selling the clothing_pieces, the status of the ClothingStore is not correct.@@"
        expected_capital = 10000 - 16 * 100 + 30 * 50
        self.assertEqual(expected_capital, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(50, clothing_pieces, m)

    def test05_clothing_store_sell_warning(self):
        try:
            sut = ClothingStore(10000)
            sut.procure(30, 100)
            sut.sell(40, 200)
        except Warning:
            capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
            capital_expected = 10000 - 24 * 100 + 40 * 100
            clothing_pieces_expected = 0
            self.assertEqual(capital_expected, capital, "@@After trying to sell too many breads, the capital should be set accordingly (sell as many items as possible).@@".format(capital_expected))
            self.assertEqual(clothing_pieces_expected, clothing_pieces,
                             "@@After trying to sell too many clothing pieces, the clothing pieces should be set accordingly.@@")
        except:
            m = "@@Unexpected error thrown when too many items where sold.@@"
            self.fail(m)
        else:
            m = "@@After trying to sell too many clothing pieces, no Warning is raised@@"
            self.fail(m)

    def test06_clothing_store_take_loan_and_pay_rent_loan(self):
        try:
            sut = ClothingStore(10000)
            sut.take_loan(0.1, 2000)
            sut.pay_rent_and_loan(1000)
            capital, loan, interest, initial_loan_amount, clothing_pieces = sut.get_status()
        except:
            m = "@@Unexpected error thrown while taking a loan or paying the rent and loan for the clothing_store.@@"
            self.fail(m)
        m = "@@After taking a loan and paying the rent and loan, the status of the clothing_store is not correct@@"
        expected_capital = 10000 + 2000 - 1000 - 200 - 200
        self.assertEqual(expected_capital, capital, m)
        self.assertEqual(1800, loan, m)
        self.assertEqual(0.1, interest, m)