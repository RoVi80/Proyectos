#!/usr/bin/env python3

from unittest import TestCase

# catch potential exception from import
try:
    from public.bakery import Bakery
except Exception:
    # Just make sure that all tests are still executed to have a stable number
    # of exercise points. An appropriate warning is generated by the smoke tests.
    pass

class TestBakery(TestCase):


    def test00_bakery_init(self):
        try:
            sut = Bakery(2500)
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
        except:
            m = "@@Unexpected error when checking the  status of the Bakery directly after initialization.@@"
            self.fail(m)
        m = "@@Incorrect result when checking the status of a Bakery directly after initialization.@@"
        self.assertEqual(2500, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(0, dough, m)
        self.assertEqual(0, bread, m)

    def test01_bakery_procure(self):
        try:
            sut = Bakery(10000)
            sut.procure(2, 1000)
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
        except Warning:
            m = "@@Unexpected Warning when checking the status of the Bakery after procurement.@@"
            self.fail(m)
        except:
            m = "@@Unexpected error when checking the status of the Bakery after procurement.@@"
            self.fail(m)
        m = "@@Incorrect result when checking the status of a Bakery after procurment.@@"
        self.assertEqual(8000, capital, m)
        self.assertEqual(1000, dough, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(0, bread, m)

    def test02_bakery_procure_warning(self):
        try:
            sut = Bakery(2000)
            sut.procure(2, 2000)
        except Warning:
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
            self.assertEqual(0, capital, "@@After trying to buy too many doughs, the capital should be set accordingly (procure as many items as possible).@@")
            self.assertEqual(1000, dough, "@@After trying to buy too many doughs, the dows of the bakery should be the amount of dow it still could afford.@@")
        except:
            m = "@@Unexpected error when checking the status of the Bakery after procurement.@@"
            self.fail(m)
        else:
            m = "@@After trying to buy too many doughs, a Warning should be thrown.@@"
            self.fail(m)


    def test03_bakery_produce(self):
        try:
            sut = Bakery(10000)
            sut.procure(2, 1000)
            sut.produce(3)
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
        except Warning:
            m = "@@Unexpected Warning during the production of bread.@@"
            self.fail(m)
        except:
            m = "@@Unexpected error during the production of bread.@@"
            self.fail(m)
        m = "@@After producing bread out of dough, the status of the bakery is not correct.@@"
        self.assertEqual(5000, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(0, dough, m)
        self.assertEqual(1000, bread, m)

    def test04_bakery_produce_warning(self):
        try:
            sut = Bakery(3000)
            sut.procure(2, 1000)
            sut.produce(3)
        except Warning:
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
            capital_expected = 3000 - 2000 - 1000 // 3 * 3
            bread_expected = 1000 // 3
            dough_expected = 1000 - 1000 // 3
            self.assertEqual(capital_expected, capital, "@@After trying to produce too many breads, the capital should be set accordingly (produce as many items as possible).@@".format(capital_expected))
            self.assertEqual(dough_expected, dough,
                             "@@After trying to produce too many breads, the dough should be set accordingly.@@")
            self.assertEqual(bread_expected, bread,
                             "@@After trying to produce too many breads, the bread should be set accordingly.@@")
        except:
            m = "@@Unexpected error thrown when too many items where produced.@@"
            self.fail(m)
        else:
            m = "@@After trying to produce too many breads, no Warning is raised@@"
            self.fail(m)

    def test05_bakery_sell(self):
        try:
            sut = Bakery(10000)
            sut.procure(2, 1000)
            sut.produce(3)
            sut.sell(6, 500)
        except Warning:
            m = "@@Unexpected Warning during the production of bread.@@"
            self.fail(m)
        except:
            m = "@@Unexpected error thrown when too many items where sold.@@"
            self.fail(m)
        capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
        m = "@@After selling bread, the status of the bakery is not correct.@@"
        expected_capital = 5000 + 6 * 0.75 * 500
        self.assertEqual(expected_capital, capital, m)
        self.assertEqual(0, loan, m)
        self.assertEqual(0, interest, m)
        self.assertEqual(0, initial_loan_amount, m)
        self.assertEqual(0, dough, m)
        self.assertEqual(500, bread, m)

    def test06_bakery_sell_warning(self):
        try:
            sut = Bakery(10000)
            sut.procure(2, 1000)
            sut.produce(3)
            sut.sell(8, 2000)
        except Warning:
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
            capital_expected = 5000 + 8 * 0.75 * 1000
            bread_expected = 0
            dough_expected = 0
            self.assertEqual(capital_expected, capital, "@@After trying to sell too many breads, the capital should be set accordingly (sell as many items as possible).@@".format(capital_expected))
            self.assertEqual(dough_expected, dough,
                             "@@After producing the dough should be set to 0.@@")
            self.assertEqual(bread_expected, bread,
                             "@@After trying to sell too many breads, the bread should be set accordingly.@@")
        except:
            m = "@@Unexpected error thrown when too many items where sold.@@"
            self.fail(m)
        else:
            m = "@@After trying to sell too many breads, no Warning is raised@@"
            self.fail(m)

    def test07_bakery_pay_rent_loan(self):
        try:
            sut = Bakery(10000)
            sut.pay_rent_and_loan(1000)
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
        except:
            m = "@@Unexpected error thrown for while paying the rent of the bakery.@@"
            self.fail(m)
        m = "@@Bakery should only pay 80% of the rent@@"
        self.assertEqual(9200, capital, m)

    def test08_bakery_take_loan_and_pay_rent_loan(self):
        try:
            sut = Bakery(10000)
            sut.take_loan(0.1, 2000)
            sut.pay_rent_and_loan(1000)
            capital, loan, interest, initial_loan_amount, dough, bread = sut.get_status()
        except:
            m = "@@Unexpected error thrown while taking a loan or paying the rent and loan for the bakery.@@"
            self.fail(m)
        m = "@@After taking a loan and paying the rent and loan, the status of the bakery is not correct@@"
        expected_capital = 10000 + 2000 - 800 - 200 - 200
        self.assertEqual(expected_capital, capital, m)
        self.assertEqual(1800, loan, m)
        self.assertEqual(0.1, interest, m)